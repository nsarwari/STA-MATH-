# -*- coding: utf-8 -*-
"""sta&math report.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u6q15EjbOmNXCWR9OVd3v2zyoWuR3jjv

Question 1 (compulsory):
The quantity of items sold varies per transaction. TTR would like to know what the probability is that a
transaction contains more than 2 items sold. Report and explain your analysis and conclusion.
"""

import numpy as np

import pandas as pd

dataset_path = 'dataset_1668303.csv'

data = pd.read_csv (dataset_path)

more_than_two_items = data[data['transaction_qty'] > 2].shape[0]
print ("more_than_two_items:", more_than_two_items )

total_transactions = data.shape[0]
print ("total_transactions:", total_transactions )

probability = more_than_two_items / total_transactions * 100

print(f"The probability that a transaction contains more than 2 items sold is: {probability:.4f}")

"""Conclusion:
The analysis revealed that about 19.5% of transactions in the dataset contain more than 2 items sold. This means that if you were to randomly select a transaction from this dataset, there's roughly a 1 in 5 chance that this transaction would include more than 2 items. This information can be useful for understanding purchasing behavior, inventory management, and sales strategies. It highlights a pattern of purchasing behavior that could be critical for business decisions, such as stocking levels, promotions, and marketing strategies aimed at increasing the average number of items per transaction.

Question 2 (compulsory):
TTR would like to obtain insight in how the unit price varies for the product types that they sell. Conduct
appropriate analysis, report relevant descriptive statistics and use visualizations when reporting your
findings. Include skewness in your interpretation.
"""

(3.0 + 3.75 + 3.15 + 4.5+ 6.3+ 3.5 + 3.25 + 2.0 + 4.25)/9

"""3.74 = mean"""

numbers = [3.0 , 3.75 , 3.15 ,  4.5 , 6.3 ,  3.5 , 3.25 , 2.0 , 4.25]

median2 = np.median (numbers)
print (median2)

"""3.5 = median"""

data['unit_price'].mean()



data['unit_price'].median()

"""I tried to get the median and mean in 2 ways just to double check. Out of these results we can say see that the mean is bigger than the median which means that the unit prices are right skewed.

measure of variation - range
"""

import scipy.stats as st

import random

import plotly.express as px

import matplotlib.pyplot as plt

x_values =('unit_price')

y_values = ('product_type')

box_plot = px.box(data, x='product_type', y='unit_price',
                      title="Box Plot of Unit Prices by Product Type")
if box_plot:
    box_plot.show()

px.histogram(data, x ='product_type' , y  = 'unit_price' ,title = "Histogram of unit prices by product type",nbins=20).show()

import plotly.express as px

"""Based on the charts, the bulk of the data is concentrated towards the left of the distribution, and the tail extends to the right. This suggests a right-skewed (positively skewed) distribution. In a right-skewed distribution, the mean is typically greater than the median, and there may be a few unusually high values stretching out to the right.

Q3: TTR would like to obtain insight in the average revenue per transaction. Because you are working with
sample data, they would like to also report the interval in which the real (population) average revenue
per transaction is likely to fall. Report and explain your analysis and conclusion.
"""

data ['revenue'] = data ['unit_price'] * data ['transaction_qty']

(data.head)()

print("Total amount of transactions:", len(data))

total_money_spent = (data['unit_price']* data["transaction_qty"]).sum()
print("Total amount of money spent:", total_money_spent )
print("Average revenue per transaction:", (total_money_spent/len(data)))

unit_price_per_date = data.groupby('transaction_date')["revenue"].sum()

print("The total amount of money spent per day:")
print(unit_price_per_date)

amount_of_transactions_per_day = data.groupby(data['transaction_date']).size()
print(amount_of_transactions_per_day)

average_value06_05 = ( 2780.75 / 379 )
average_value06_06 = (6211.40 / 799)
average_value06_07 = (  6353.65 / 871 )
average_value06_08 = (7727.30 / 1096 )
average_value06_09 = (  10423.15 / 1403)
average_value06_10 = (11596.25 / 1537 )
average_value06_11 = ( 9587.60 / 1271 )

print ("average value per T 06/05:", average_value06_05)
print ("average value per T 06/06:", average_value06_06)
print ("average value per T 06/07:", average_value06_07)
print ("average value per T 06/08:", average_value06_08)
print ("average value per T 06/09:", average_value06_09)
print ("average value per T 06/10:", average_value06_10)
print ("average value per T 06/11:", average_value06_11)

sample_mean = ( average_value06_05 + average_value06_06 + average_value06_07 + average_value06_08 + average_value06_09 + average_value06_10 + average_value06_11 ) / 7

print("sample mean:", sample_mean)

Average_value_perdays = average_value06_05 , average_value06_06, average_value06_07 , average_value06_08, average_value06_09, average_value06_10 , average_value06_11

std_deviation = np.std ( Average_value_perdays, ddof = 0)
print ("Standard deviation:", std_deviation)

Confidence_interval = sample_mean + 1.96 * (std_deviation/7)
print ( Confidence_interval)

"""Assignment 4

How well do different product
types sell in terms of revenue?
Are there product types that sell
significantly worse than others?
"""

data ['total_revenue'] = data ['transaction_qty'] * data ['unit_price']

revenue_by_producttype = data.groupby('product_type')['total_revenue'].sum().sort_values(ascending=False).reset_index()
print(revenue_by_producttype)

mean_revenue_by_producttype = (16272.00 + 5959.80 +4466.00+4320.00+ 3633.75+3474.00+3300.50+3068.00+2947.00+2857.05+2778.00 + 1604.00) / 12
print (mean_revenue_by_producttype)

